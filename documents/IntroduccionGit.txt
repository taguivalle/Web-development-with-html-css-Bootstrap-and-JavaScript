GIT SISTEMA DE CONTROL DE VERSIONES. Creado por linux y especialmente por Linus Torvalds.

Esto significa que esta herramienta tecnológica nos permite guardar esos cambios que se hacen en 
nuestro código pero de una manera más exacta; como por ejemplo; saber quién hizo los cambios, saber la
fecha, hora exacta; además con estos datos de se puede regresar en algún momento que haya podido 
encotrarse un error en el código.

Git fue diseñado para operar en un entorno Linux. Actualmente, es multiplataforma, es decir, es 
compatible con Linux, MacOS y Windows. En la máquina local se encuentra Git, se utiliza bajo la 
terminal o línea de comandos y tiene comandos como merge, pull, add, commit y rebase, entre otros.

Características de Git:

Git te ayuda a trabajar de manera más organizada y colaborativa en proyectos de desarrollo de 
software. Estas son algunas de sus principales características:

1.- Control de versiones
Git almacena la información como un conjunto de archivos. Te permite llevar un registro de los cambios 
que haces en tus archivos, lo que significa que siempre puedes volver a versiones anteriores si algo 
sale mal.

2.- Ramificación
Puedes crear ramas en tu proyecto, lo que te permite trabajar en diferentes características o aspectos 
del mismo sin afectar el trabajo de los demás.

3.- Colaboración
En Git, varias personas pueden trabajar en diferentes aspectos del proyecto al mismo tiempo.

4.- Seguridad
No existen cambios, corrupción en archivos o cualquier alteración sin que Git lo sepa. Git cuenta con 
3 estados en los que es posible localizar archivos: Staged, Modified y Committed.

4.- Flexibilidad
Casi todo en Git es local. Es difícil que se necesiten recursos o información externos, basta con los 
recursos locales con los que cuenta.

5.- Comandos
Git tiene una sintaxis de comandos bastante sencilla y fácil de aprender, lo que lo hace accesible 
incluso para principiantes en programación

CONFIGURAR GITHUB

1. Primero se debe de crear una cuenta en GitHub llenar los datos que exige la PLATAFORMA.
2. extraído de: https://www.youtube.com/watch?v=VdGzPZ31ts8

pasos para configurar git por primera vez y de manera GLOBAL:

1. git config --global user.name "nombre completo"
2. git config user.name (para verificar que usuario tenemos)
3. git config user.email "usuario del correo que tenemos en git hub preferiblemente"
4. git user.email (para verficar que email tenemos)
5. git config --global core.editor "code --wait"// Este comando permite que la terminal se quede 
    esperando hasta que nosotros cerremos el editor de texto.
6. git config --global -e //esto permite abrir nuestro editor y permanece así hasta que lo cerremos.
7. git config --global core.autocrlf true // ojo solamente para usuarios de Windows 
8. git config --global core.autocrlf input // ojo solamente para usuarios de linux 
====================================================================================
ALGUNOS COMANDOS BASICOS:

01. git init // para inicializar un repositorio completamente vacío dentro los servidores  de git.
02. git status // para ver todos los archivos que se encuentran abiertos sin guardar.(aparecen en color rojo)
03. git add . // Con le punto se agregan todos los archivos. o en su defecto
04. git add nombredelarchivo.tal
05. git status // debe de aparecer en color verde (este paso es opcional)
06. git commit -m "Aquí se escribe un comentario acorde a lo que se hizo en el directorio"
07. git push // como su nombre lo indica obliga a que se suban y se alojen los códigos a nuestro repositorio de 
    git hub.
08. git config -h // nos deja ver la lista de todas las configuraciones de git.
09. ls //nos permite ver todas las carpetas y los archivos de nuestro directorio.
10. ls -a // permite ver todos los archivos que se encuentren ocultos.
11. pwd // permite ver en que directorio nos encontramos.
12. cd // nos permite regresar al directorio inmediatamente anterior o lo nombran textualmente.
13. cd .. // nos permite devolvernos a la carpeta o directorio de nuestros archivos en la jerarquía.
14. mkdir se escribe el nombre de la carpeta a crear // Para crear una carpeta o un directorio.
15. rm nombredelarchivo.tal //n como su nombre lo indica eliminar ese archivo o directorio.
16. git restore --stage nombredelarchivo.tal // para recuperar el archivo que fue eliminado.
17. mv nombredelarchivo.tal (hacia donde lo queremos mover) archivo.tal // sirve para editar lso nombres de los 
    archivos
18. git ignore // sirve para que no se muestren ninguna clase de archivos al repositorio.
19. git status -s // nos permite ver cada uno de los archivos que son ignorados; esto nos sirve para aderir el 
    archivo que deseamos agregar realmente a nuestro repositorio.
20. git diff // nos muestra todo el texto de los cambios que nosotros podamos agregar (git add .)
21. git --staged/ para solamente los archivos y su etado.
22. git log --online (para ver el historial de los commit anterior) aparecen unos numeros y letras de color 
    diferente  al lado derecho lo que significa que es un sólo registro para ese commit con su respetivo mensaje 
    o comentario.
23. git log --stat//para ver las estadísticas del commit de autor; cuantas lineas en la estructura HTML.
24. git log checkout //aqui se escribe sin las comillas el commit que se quiere eliminar o corregir" pero ojo al 
    eliminar el commit.

===================================================================================================================================
RAMAS DE GIT

1. git branch (o sea las ramas) que se han hecho en el código en el tiempo. y nos debe de aparecer (main)
2. cat nombredelarchivo.tal // para ver el contenido de nuestro archivo
2. git checkout master (main)
3. git chekout -b ramafooter (como se quiera llamar a esa rama)
4. git chekout main (master) para regresar a la rama principal pues nos encontrabamos en ramafooter.
5. git log (nos muestra lo que se ha hecho en la rama main)
6. git merch ramafooter (para unir la ramafooter y la rama main)
7. git branch -d y el nombre de la rama para elminarla.

======================================================================================================
Comandos para trabajo remoto con GIT

1.- git clone url_del_servidor_remoto: Nos permite descargar los archivos de la última versión de la rama principal 
    y todo el historial de cambios en la carpeta .git.
2.- git fetch: Lo usamos para traer actualizaciones del servidor remoto y guardarlas en nuestro repositorio local 
    (en caso de que hayan, por supuesto).
3.- git merge: También usamos el comando git merge con servidores remotos. Lo necesitamos para combinar los últimos 
    cambios del servidor remoto y nuestro directorio de trabajo.
4.- git pull: Básicamente, git fetch y git merge al mismo tiempo.

======================================================================================================
Algunos comandos que pueden ayudar cuando colaboren con proyectos muy grandes de github:

git log --oneline - Te muestra el id commit y el título del commit.
git log --decorate- Te muestra donde se encuentra el head point en el log.
git log --stat - Explica el número de líneas que se cambiaron brevemente.
git log -p- Explica el número de líneas que se cambiaron y te muestra que se cambió en el contenido.
git shortlog - Indica que commits ha realizado un usuario, mostrando el usuario y el titulo de sus commits.
git log --graph --oneline --decorate y
git log --pretty=format:"%cn hizo un commit %h el dia %cd" - Muestra mensajes personalizados de los commits.
git log -3 - Limitamos el número de commits.
git log --after=“2018-1-2” ,
git log --after=“today” y
git log --after=“2018-1-2” --before=“today” - Commits para localizar por fechas.
git log --author=“Name Author” - Commits realizados por autor que cumplan exactamente con el nombre.
git log --grep=“INVIE” - Busca los commits que cumplan tal cuál está escrito entre las comillas.
git log --grep=“INVIE” –i- Busca los commits que cumplan sin importar mayúsculas o minúsculas.
git log – index.html- Busca los commits en un archivo en específico.
git log -S “Por contenido”- Buscar los commits con el contenido dentro del archivo.
git log > log.txt - guardar los logs en un archivo txt




